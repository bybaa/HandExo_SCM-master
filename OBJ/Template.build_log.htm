<html>
<body>
<pre>
<h1>µVision Build Log</h1>
<h2>Tool Versions:</h2>
IDE-Version: ¦ÌVision V5.36.0.0
Copyright (C) 2021 ARM Ltd and ARM Germany GmbH. All rights reserved.
License Information: Yangbin Bao, ZheJiang University, LIC=21E4T-RHBCI-JJB6S-LHB1F-7VGY1-XF1PX
 
Tool Versions:
Toolchain:       MDK-ARM Plus  Version: 5.36.0.0
Toolchain Path:  D:\MDK5.36\ARM\ARMCC\Bin
C Compiler:      Armcc.exe V5.06 update 7 (build 960)
Assembler:       Armasm.exe V5.06 update 7 (build 960)
Linker/Locator:  ArmLink.exe V5.06 update 7 (build 960)
Library Manager: ArmAr.exe V5.06 update 7 (build 960)
Hex Converter:   FromElf.exe V5.06 update 7 (build 960)
CPU DLL:         SARMCM3.DLL V5.36.0.0
Dialog DLL:      DCM.DLL V1.17.3.0
Target DLL:      STLink\ST-LINKIII-KEIL_SWO.dll V3.0.9.0
Dialog DLL:      TCM.DLL V1.53.0.0
 
<h2>Project:</h2>
C:\Users\Admin\Desktop\HandExo-SCM\HandExo_SCM-master\USER\Template.uvprojx
Project File Date:  06/24/2024

<h2>Output:</h2>
*** Using Compiler 'V5.06 update 7 (build 960)', folder: 'D:\MDK5.36\ARM\ARMCC\Bin'
Build target 'Template'
compiling main.c...
main.c(79): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	if (R_R < 0.003) {
main.c(80): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0) / 0.003 * 2;
main.c(81): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.010) {
main.c(82): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.003) / 0.007 * 3 + 2;
main.c(83): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.021) {
main.c(84): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.010) / (0.011) * 5 + 5;
main.c(85): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.030) {
main.c(86): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.021) / (9) * 10000 + 10;
main.c(87): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.040) {
main.c(88): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.030) / (1e-3) + 20;
main.c(89): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.055) {
main.c(90): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.040) / (3) * 4000 + 30;
main.c(91): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.081) {
main.c(92): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.055) / (13) * 25000 + 50;
main.c(93): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.131) {
main.c(94): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.081) * 2000 + 100;
main.c(95): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.166) {
main.c(96): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.131) * 20000 / 7 + 200;
main.c(97): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.199) {
main.c(98): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.166) * 100000 / 33 + 300;
main.c(99): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.229){
main.c(100): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.199) * 10000 / 3 + 400;
main.c(101): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.260){
main.c(102): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.229) * 100000 / 31 + 500;
main.c(103): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.293){
main.c(104): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.26) * 100000 / 33 + 600;
main.c(105): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.320){
main.c(106): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.293) * 100000 / 27 + 700;
main.c(107): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.351){
main.c(108): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.320) * 100000 / 31 + 800;
main.c(109): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.380){
main.c(110): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.351) * 100000 / 29 + 900;
main.c(111): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.428){
main.c(112): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.380) * 12500 / 3 + 1000; 
main.c(113): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.448){
main.c(114): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.428) * 5000 + 1200;
main.c(115): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.484){
main.c(116): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.448) * 50000 / 9 + 1300;
main.c(117): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	} else if (R_R < 0.567){
main.c(118): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		f = (R_R - 0.484) * 100000 / 83 + 1400;
main.c(141): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	g_torch = l1 * m3 * 9.8 * cosf(alpha[0]) + l2 * m3 * 9.8 * cosf(alpha[1]) + 1/2 * l3 * m3 * 9.8 * cosf(alpha[2]) + 1/2 * l2 * m2 * 9.8 * cosf(alpha[1]) + l1 * m2 * 9.8 * cosf(alpha[0]) + 1/2 * l1 * m1 * 9.8 * cosf(alpha[0]) ;
main.c(141): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	g_torch = l1 * m3 * 9.8 * cosf(alpha[0]) + l2 * m3 * 9.8 * cosf(alpha[1]) + 1/2 * l3 * m3 * 9.8 * cosf(alpha[2]) + 1/2 * l2 * m2 * 9.8 * cosf(alpha[1]) + l1 * m2 * 9.8 * cosf(alpha[0]) + 1/2 * l1 * m1 * 9.8 * cosf(alpha[0]) ;
main.c(141): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	g_torch = l1 * m3 * 9.8 * cosf(alpha[0]) + l2 * m3 * 9.8 * cosf(alpha[1]) + 1/2 * l3 * m3 * 9.8 * cosf(alpha[2]) + 1/2 * l2 * m2 * 9.8 * cosf(alpha[1]) + l1 * m2 * 9.8 * cosf(alpha[0]) + 1/2 * l1 * m1 * 9.8 * cosf(alpha[0]) ;
main.c(141): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	g_torch = l1 * m3 * 9.8 * cosf(alpha[0]) + l2 * m3 * 9.8 * cosf(alpha[1]) + 1/2 * l3 * m3 * 9.8 * cosf(alpha[2]) + 1/2 * l2 * m2 * 9.8 * cosf(alpha[1]) + l1 * m2 * 9.8 * cosf(alpha[0]) + 1/2 * l1 * m1 * 9.8 * cosf(alpha[0]) ;
main.c(141): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	g_torch = l1 * m3 * 9.8 * cosf(alpha[0]) + l2 * m3 * 9.8 * cosf(alpha[1]) + 1/2 * l3 * m3 * 9.8 * cosf(alpha[2]) + 1/2 * l2 * m2 * 9.8 * cosf(alpha[1]) + l1 * m2 * 9.8 * cosf(alpha[0]) + 1/2 * l1 * m1 * 9.8 * cosf(alpha[0]) ;
main.c(141): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	g_torch = l1 * m3 * 9.8 * cosf(alpha[0]) + l2 * m3 * 9.8 * cosf(alpha[1]) + 1/2 * l3 * m3 * 9.8 * cosf(alpha[2]) + 1/2 * l2 * m2 * 9.8 * cosf(alpha[1]) + l1 * m2 * 9.8 * cosf(alpha[0]) + 1/2 * l1 * m1 * 9.8 * cosf(alpha[0]) ;
main.c(143): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  	return g_torch*1e-3;
main.c(136): warning:  #177-D: variable "d2r"  was declared but never referenced
  	float d2r = pi/180;
main.c(357): warning:  #1035-D: single-precision operand implicitly converted to double-precision
  		force_sen = R_R2force(R_R) * 1e-2;
main.c: 49 warnings, 0 errors
linking...
Program Size: Code=154414 RO-data=8762 RW-data=944 ZI-data=403936  
FromELF: creating hex file...
"..\OBJ\Template.axf" - 0 Error(s), 49 Warning(s).

<h2>Software Packages used:</h2>

Package Vendor: Keil
                https://www.keil.com/pack/Keil.STM32F4xx_DFP.2.17.1.pack
                Keil.STM32F4xx_DFP.2.17.1
                STMicroelectronics STM32F4 Series Device Support, Drivers and Examples

<h2>Collection of Component include folders:</h2>
  D:\MDK5.36\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32F4xx\Include

<h2>Collection of Component Files used:</h2>
Build Time Elapsed:  00:00:04
</pre>
</body>
</html>
